Docker
Container nada mais são do que uma pequena camada de leitura e escrita, que funcionam em cima das imagens, que não podem ser modificadas,
pois são somente para leitura.
-Mais leve
-Melhor controle sobre uso de cada recurso
-Maior facilidade na hora de treabalhar com linguagens diferentes.


-Dois apps utilizados a mesma porta
-Se um app começar consumir muito de um recurso, como CPU
-E se uma app congelar todo sistema

-Docker
-Vai intermedio entre container e sistema operacional
-Docker compose um jeito fácil de definir e orquestras múltiplos container
-Docker Swarm uma ferramenta para colocar múltiplos Dockers hosts para trabalharem juntos em cluster
-Docker Hub, um repositório com mais de 250 mil imagens diferentes para os nossos containers;
-Docker Machine, uma ferramenta que nos permite gerenciar o Docker em um host virtual

docker ps -a "exibir todos container criados"
docker run -it ubuntu "atrelar terminal do container"

docker start ID do container
docker stop ID do container
docker stop -t 0 ID do container
docker ps -q mostra container que estão ativos
docker stop -t 0 $(docker ps -q) para os container

docker start -a -i Id container iniciar container com terminal atrelado

docker rm id  remover container
docker container prune exclui  realmente apaga todos os containers inativos, mas dá um aviso antes.
docker images lista as imagens
docker rmi no imagens a ser removidar

--quando estou criando um container na verdade estou criando pequena camada Layered File System  READ/WRITE LAYER que fica encima da imagem que baixei com Docker, é nele que consigo escrever nela

docker run -d dockersamples/static-site ele roda em modo static não trava o terminal
docker run -d -P dockersamples/static-site ele mapea uma porta para site localhost:32769
docker run -d -p 12345:80 dockersamples/static-site com para -p vc já coloca a porta que vc deseja mapear
docker port id 
docker run -d -P --name meu-site dockersamples/static-site nomear o container
docker run -d -p 12345:80 -e AUTHOR="Elias" dockersamples/static-site utilizar uma variavel de ambiente


Repare que com Docker os desenvolvedores não precisam se preocupar em configurar um ambiente de desenvolvimento específico de cada vez. Em vez disso, 
eles podem se concentrar na construção de um código de boa qualidade. Isso, obviamente, leva à aceleração nos esforços de desenvolvimento. 
O Docker facilita muito construir o ambiente: é rapido, simples e confiável.

Com a padronização de um entregável Docker é possível que o desenvolvedor tenha um ambiente similar ao de produção na sua máquina sem todo o custo de 
configuração e o Sysadmin consiga lidar apenas com um tipo de entregável conseguindo, desta forma, dar atenção aos desafios de monitoramento e orquestração 
para que nada dê errado. Neste caso, o melhor para os dois.

Segue também uma breve lista dos comandos utilizados:

docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker start ID_CONTAINER - inicia o container com id em questão.
docker stop ID_CONTAINER - interrompe o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -d -P -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.

Volumes- Então, quando criamos um volume, criamos uma pasta dentro do container, e o que escrevermos dentro dessa pasta na verdade estaremos escrevendo do Docker Host.

docker run -v "/var/www" ubuntu criar container com volume,cria um volume no respectivo caminho do container
docker inspect id inspecionar o container retorna diversas informações sobre o container.
docker run -it -v "/home/elias/Área de Trabalho/:/var/www" ubuntu
cd var/www/
touch novo-arquivo.txt
echo "Este arquivo foi criado dentro de um volume" > novo-arquivo.txt

docker run node
docker run -d -p 8080:3000 -v "/home/elias/Área de Trabalho/volume-exemplo:/var/www" -w "/var/www" node npm start
docker run -d -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start
docker build -f Dockerfile -t douglasq/node 
docker container logs
DockerFileSystem

FROM node:latest -- pegar a ultima versão do node
LABEL Elias Lemes Defina o campo Autor das imagens geradas
ENV PORT=3000 -- set a porta para servidor
COPY . /var/www -- copiar todos os arquivo que estão no .
WORKDIR /var/www -- copilar no diretório /var/www
RUN npm install 
ENTRYPOINT npm start
EXPOSE $PORT -- Variavel de ambiente

docker build -f Dockerfile
docker build -f Dockerfile -t Eliasl/estudo-docker .
docker run -d -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start
docker push
docker pull

as imagens são read-only sempre
um container é uma instância de uma imagem
para guardar as alterações a docker engine cria uma nova layer em cima da última layer da imagem
Segue também uma breve lista dos comandos utilizados:

docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f CAMINHO_DOCKERFILE/Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.

redes
hostname -i vemos o IP atribuído a ele pela rede local do Docker
docker network create --driver bridge minha-rede
docker run -it --name meu-container-de-ubuntu --network minha-rede ubuntu
docker run -it --name segundo-ubuntu --network minha-rede ubuntu


docker pull douglasq/alura-books:cap05
docker pull mongo

docker run -d -p 8080:3000 douglasq/alura-books:cap05
docker run -d --name meu-mongo --network minha-rede mongo
docker run --network minha-rede -d -p 8080:3000 douglasq/alura-books:cap05

Que imagens criadas pelo Docker acessam a mesma rede, porém apenas através de IP.
Ao criar uma rede é possível realizar a comunicação entre os containers através do seu nome.
Que durante a criação de uma rede precisamos indicar qual driver utilizaremos, geralmente, o driver bridge.
Segue também uma breve lista dos comandos utilizados:

hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.

Docker compose
Ao invés de subir todos esses containers na mão, o que vamos fazer é utilizar uma tecnologia aliada do Docker, chamada Docker Compose, feito para 
nos auxiliar a orquestrar melhor múltiplos containers. Ele funciona seguindo um arquivo de texto YAML (extensão .yml), e nele nós descrevemos tudo
o que queremos que aconteça para subir a nossa aplicação, todo o nosso processo de build, isto é, subir o banco, os containers das aplicações, etc.

No arquivo nginx.conf, dentro server, está a parte que trata de servir os arquivos estáticos. Na porta 80, no localhost, em /var/www/public, 
ele será responsável por servir as pastas css, img e js. E todo resto, que não for esses três locais, ele irá jogar para o node_upstream.

No node_upstream, é onde ficam as configurações para o NGINX redirecionar as conexões que ele receber para um dos três containers da nossa aplicação.
O redirecionamento acontecerá de forma circular, ou seja, a primeira conexão irá para o primeiro container, a segunda irá para o segundo container,
a terceira irá para o terceiro container, na quarta, começa tudo de novo, e ela vai para o primeiro container e assim por diante.
 

version: '3'
services:
    nginx:
        build:
            dockerfile: ./docker/nginx.dockerfile
            context: .
        image: douglasq/nginx
        container_name: nginx
        ports:
            - "80:80"
        networks: 
            - production-network
        depends_on: 
            - "node1"
            - "node2"
            - "node3"

    mongodb:
        image: mongo
        networks: 
            - production-network

    node1:
        build:
            dockerfile: ./docker/alura-books.dockerfile
            context: .
        image: douglasq/alura-books
        container_name: alura-books-1
        ports:
            - "3000"
        networks: 
            - production-network
        depends_on:
            - "mongodb"

    node2:
        build:
            dockerfile: ./docker/alura-books.dockerfile
            context: .
        image: douglasq/alura-books
        container_name: alura-books-2
        ports:
            - "3000"
        networks: 
            - production-network
        depends_on:
            - "mongodb"

    node3:
        build:
            dockerfile: ./docker/alura-books.dockerfile
            context: .
        image: douglasq/alura-books
        container_name: alura-books-3
        ports:
            - "3000"
        networks: 
            - production-network
        depends_on:
            - "mongodb"

networks: 
    production-network:
        driver: bridge
		
		
Instando o docker compose
sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

cd Desktop/alura-docker-cap06/
~/Desktop/alura-docker-cap06$ sudo docker-compose build

docker-compose up -d

docker exec -it alura-books-1 ping alura-books-2
docker-compose up - sobe os serviços criados
docker-compose down - para os serviços criados.
docker-compose ps - lista os serviços que estão rodando.
docker exec -it alura-books-1 ping node2- executa o comando ping node2 dentro do container alura-books-1

Docker Swarm facilita a criação e administração de um cluster de containers.

Segue a lista com os principais comandos utilizados durante o curso:

Comandos relacionados às informações
docker version - exibe a versão do docker que está instalada.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
Comandos relacionados à execução
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container e define uma porta aleatória.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -v "CAMINHO_VOLUME" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.
Comandos relacionados à inicialização/interrupção
docker start ID_CONTAINER - inicia o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker stop ID_CONTAINER - interrompe o container com id em questão.
Comandos relacionados à remoção
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
Comandos relacionados à construção de Dockerfile
docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM CAMINHO_DOCKERFILE - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
Comandos relacionados ao Docker Hub
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
Comandos relacionados à rede

hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
Comandos relacionados ao docker-compose

docker-compose build - Realiza o build dos serviços relacionados ao arquivo docker-compose.yml, assim como verifica a sua sintaxe.
docker-compose up - Sobe todos os containers relacionados ao docker-compose, desde que o build já tenha sido executado.
docker-compose down - Para todos os serviços em execução que estejam relacionados ao arquivo docker-compose.yml.


Usando Docker Multi-Stage Build para otimizar a imagem
Uma imagem Docker deve ficar menor possível para otimizar o carregamento e armazenamento no registro. No entanto, na construção da aplicação muitas vezes
é necessário instalar e usar ferramentas apenas para compilar e criar a aplicação. Uma vez criada essas ferramentas não são mais precisos.

A** construção em múltiplos estágios** permite gerar uma imagem baseada em diversas etapas para levar nada que não é preciso para executar
 a aplicação e gerar imagens mais leves. https://docs.docker.com/develop/develop-images/multistage-build/