Docker Machine dentro de uma máquina física ela consegue criar diversas máquinas virtuais, seja quantas quisermos, uma, duas, três, seis, e cada uma delas bem 
levinha, já vai ter um Docker instalado, então nesse ambiente o que vai acontecer? Vamos criar algumas máquinas virtuais, e a partir dessas máquinas virtuais, 
vamos criar o nosso cluster no fim das contas, ou seja, o nosso cluster todo, nosso Swarm por assim dizer, vai ser criado dentro da nossa máquina física com 
diversas máquinas virtuais levinha.

docker-machine create -d virtualbox vm1

docker-machine ssh vm1

https://docs.docker.com/machine/examples/aws/

docker-swarm init --advertise-addr” e agora eu vou passar o IP da minha máquina física, “192.168.99.112”

docker info   ele vai mostrar aqui Swarm: active, significa que o Swarm está ativo nessa máquina

O Docker Swarm é um orquestrador
O Docker Swarm é capaz de alocar e reiniciar containers de maneira automática
Como criar máquinas já provisionadas para utilizar o Docker com a Docker Machine utilizando comando docker-machine create
Um cluster é um conjunto de máquinas dividindo poder computacional
Como criar um cluster utilizando o Docker Swarm utilizando o comando docker swarm init

 “docker swarm join-token worker”, e ele retorna aqui para mim o comando necessário para adicionar novos workers,
 
 docker node ls”, ele lista para nós o ID o hostname de cada nó que faz parte do meu Swarm.
 
 docker node rm id  comando realizado no managers 
 
 docker swarm leave” e o nó saiu do Swarm, 
 
 “docker node inspect vm2”, eu quero inspecionar a minha vm2, e como esse comando é um comando de leitura de estado do nosso Swarm,
 
 docker service create -p 8080:3000 aluracursos/barbearia esse comando realizado no managers
 
 O comando docker service create no final cria um container em escopo do swarm e o docker container run em escopo local.
 
 docker node inspect vm1
 
  Routing Mesh conseguimos acessar diferentes serviços a partir de qualquer IP pertencente ao swarm.
 
 
Que nós workers são responsáveis por executar containers
Comandos de leitura e visualização de nós, como o docker node ls
Comandos que leem ou alteram o estado do swarm só podem ser executados em nós managers
O comando docker container run sobe containers em escopo local e o docker service create cria serviços em escopo do swarm
Tarefas são instâncias de serviços
Portas são compartilhadas entre nós do swarm e são acessíveis a partir de qualquer nó graças ao routing mesh

cd /var/lib/docker/swarm”. E agora se eu der um “ls” aqui ele mostra todos os conteúdos, tudo que está sendo gerenciado pelo meu Swarm,

cp -r /var/lib/swarm/docker backup

cp -r  backup/* var/lib/docker/swarm

docker-swarm init --force-new-cluster --advertise-addr” e agora eu vou passar o IP da minha máquina física, “192.168.99.112”

docker swarm join-token manager”, e ele vai dar o output aqui para nós mostrando o quê? O comando para adicionar um manager ao Swarm

docker node ls --format "{{.Hostname}} {{.ManagerStatus}}"

Que nós managers são primariamente responsáveis pela orquestração do swarm
A importância e como realizar o backup do swarm
Que podemos ter mais de um nó manager no swarm
A importância do Leader dentro do swarm
Como é feita a eleição de um novo Leader em caso de falhas
Os requisitos para funcionamento do RAFT

Devemos primeiramente rebaixar o cargo do nó com o comando docker node demote e depois removê-lo com o comando docker node rm.
 
docker node update --availability drain "Com a disponibilidade em drain, não conseguiremos executar mais tarefas/containers nesse nó.

docker service update --constraint-add [node.role == worker]


docker service update --replicas 5 ci10k3u7q6ti
docker service scale ci10k3u7q6ti=5

Serviços replicados rodam em um ou mais nós do swarm
Serviços globais rodam em todos os nós do swarm
Nós managers por padrão trabalham como workers
Serviços como monitoramento e segurança são bons exemplos de serviços globais
Como definir o modo que o serviço será criado utilizando a flag --mode no momento da criação do serviço

docker network ls

driver overlay 

docker node inspect --pretty

Mas a rede que é a overlay aqui, a nossa ingress, ele tem um mesmo ID, ou seja, todos os nossos nós do nosso Swarm, seja ele manager ou worker, eles estão todos dentro dessa mesma rede que é a ingress, quando um nó entra em um Swarm por padrão ele entra nessa rede ingress, essa rede é criada junto com o nosso cluster lá no comando do docker swarm init e todos que entrarem vão entrar por padrão nessa rede.

Por mais que o driver overlay seja responsável por comunicar múltiplos hosts em uma mesma rede, também podemos conectar containers em escopo local criados com o comando docker container run em redes criadas com esse driver.

Para isso, basta no momento da criação da rede utilizarmos a flag --attachable:
docker network create -d overlay --attachable my_overlay

Nesta aula, aprendemos:

A rede ingress é a padrão criada junto com nosso swarm
O driver overlay é utilizado para a comunicação entre nós em diferentes hosts
Como criar nossas próprias redes com o driver overlay utilizando o comando docker network create -d overlay
Redes overlays criadas manualmente (User-Defined Overlay) permitem a comunicação entre serviços por seus nomes (Service Discovery)
As redes criadas com o driver overlay são listadas de maneira lazy para workers
 
 